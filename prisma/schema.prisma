// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==================== Enums ====================

enum ProgressStatus {
  not_started
  in_progress
  completed
}

enum Difficulty {
  easy
  medium
  hard
}

// ==================== Models ====================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  image          String?
  role           String    @default("free")
  hashedPassword String?
  emailVerified  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]
  progress  Progress[]
  solutions Solution[]
}

model Progress {
  id          String         @id @default(cuid())
  userId      String
  lessonId    String?
  challengeId String?
  status      ProgressStatus @default(not_started)
  updatedAt   DateTime       @updatedAt

  user      User       @relation(fields: [userId], references: [id])
  lesson    Lesson?    @relation(fields: [lessonId], references: [id])
  challenge Challenge? @relation(fields: [challengeId], references: [id])
}

model Lesson {
  id          String @id @default(cuid())
  title       String
  description String
  content     String
  order       Int

  progress   Progress[]
  challenges Challenge[]
}

model Challenge {
  id          String     @id @default(cuid())
  lessonId    String?
  title       String
  prompt      String
  starterCode String
  difficulty  Difficulty
  order       Int

  lesson    Lesson?    @relation(fields: [lessonId], references: [id])
  progress  Progress[]
  testCases TestCase[]
  solutions Solution[]
}

model TestCase {
  id             String @id @default(cuid())
  challengeId    String
  input          String
  expectedOutput String

  challenge Challenge @relation(fields: [challengeId], references: [id])
}

model Solution {
  id          String   @id @default(cuid())
  userId      String
  challengeId String
  code        String
  createdAt   DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id])
  challenge Challenge @relation(fields: [challengeId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
